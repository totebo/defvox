
local magicavoxel = require "magicavoxel"
local test = require "test"

------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
-- Utils
--
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------


local function normalise_euler(euler)

	return (euler + 180) % 360 - 180

end

function init(self)

	local magicavoxel_data = magicavoxel.load("/custom_resources/test.vox")
	for model_index, model in ipairs(magicavoxel_data.models) do

		print(model_index)
		-- model.size

		for _, voxel in ipairs(model.voxels) do
			local game_object = factory.create("/go#voxel_factory", voxel.world_position)
			local cube_model = msg.url(nil, game_object, "model") 
			local color = magicavoxel.get_color(voxel.color_index)
			go.set(cube_model, "tint", color)
		end

	end


	msg.post("#", "acquire_input_focus")

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end



local pressed_position
local pressed_camera_pivot_rotation_x
local pressed_camera_pivot_rotation_z

function on_input(self, action_id, action)

	if action_id == hash("touch") then

		if action.pressed then
			pressed_position = vmath.vector3(action.screen_x, action.screen_y, 0)
			-- Store the initial euler angles of the pivot
			pressed_camera_pivot_rotation_x = go.get("/pivot", "euler.x")
			pressed_camera_pivot_rotation_z = go.get("/pivot", "euler.z")
		else
			local position = vmath.vector3(action.screen_x, action.screen_y, 0)
			local drag_vector = pressed_position - position
			local delta_euler_z = drag_vector.x * 0.1 -- Change in Z rotation (yaw)
			local delta_euler_x = drag_vector.y * -0.1 -- Change in X tilt (pitch)

			-- Update the Euler angles based on drag
			local new_euler_z = pressed_camera_pivot_rotation_z + delta_euler_z
			local new_euler_x = pressed_camera_pivot_rotation_x + delta_euler_x

			print(new_euler_x)

			--[[
			local lock = 90
			if new_euler_x < -lock then
				print(new_euler_x)
				new_euler_x = -lock
			end

			if new_euler_x > lock then
				new_euler_x = lock
			end
			--]]
			
			-- Clamp the X tilt to be between -90 and 90 degrees
			--new_euler_x = math.max(-90, math.min(90, new_euler_x))

			-- Apply the new Euler angles to the game object
			go.set("/pivot", "euler.x", new_euler_x)
			go.set("/pivot", "euler.z", new_euler_z)
		end
		
		
	end

end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
