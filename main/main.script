
local magicavoxel = require "magicavoxel"
local test = require "test"

function init(self)

	local magicavoxel_data = magicavoxel.load("/custom_resources/test.vox")
	for model_index, model in ipairs(magicavoxel_data.models) do

		print(model_index)
		-- model.size

		for _, voxel in ipairs(model.voxels) do
			local game_object = factory.create("/go#voxel_factory", voxel.world_position)
			local cube_model = msg.url(nil, game_object, "model") 
			local color = magicavoxel.get_color(voxel.color_index)
			go.set(cube_model, "tint", color)
		end

	end


	msg.post("#", "acquire_input_focus")

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

local pressed_time
local pressed_posiion
local pressed_camera_euler_z
local pressed_camera_euler_x

function on_input(self, action_id, action)

	if action_id == hash("touch") then

		if action.pressed then
			pressed_time = socket.gettime()
			pressed_posiion = vmath.vector3(action.screen_x, action.screen_y, 0)
			pressed_camera_euler_z = go.get("/rotation", "euler.z")
			pressed_camera_euler_x = go.get("/tilt", "euler.x")
		else

			local position = vmath.vector3(action.screen_x, action.screen_y, 0)
			local drag_vector = pressed_posiion-position

			-- Rotation
			local euler_z = pressed_camera_euler_z + (drag_vector.x * 0.1) -- Rotate
			go.set("/rotation", "euler.z", euler_z)

			-- Tilt
			local euler_x = pressed_camera_euler_x - (drag_vector.y * 0.1) -- Rotate
			if euler_x > 90 then
				euler_x = 90
			end
			if euler_x < -90 then
				euler_x = -90
			end
			go.set("/tilt", "euler.x", euler_x)

		end
		
	end

end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
